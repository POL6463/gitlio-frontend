'use client';
import axios from 'axios';
import { domain } from '@/domain/domain';
import { Data } from '@/app/editor/(interface)/ProjectData';

interface CreateProjectData {
  githubId: string;
  repoUrl: string;
  userId: number;
}

class ProjectCreationError extends Error {
  constructor(
    message: string,
    public details?: any
  ) {
    super(message);
    this.name = 'ProjectCreationError';
  }
}

export async function CreateGPTProject({
  githubId,
  repoUrl,
  userId,
}: CreateProjectData): Promise<Data> {
  try {
    const url = `${domain}/repositories/chat-gpt`;
    const requestBody = {
      user_id: userId,
      github_username: githubId,
      repository_url: [repoUrl],
    };

    console.log('Sending POST request to:', url);
    console.log('Request Body:', requestBody);

    const response = await axios.post(url, requestBody, {
      headers: { 'Content-Type': 'application/json' },
    });

    console.log('리스폰스:', response.data.data[0].organization);

    const projectData = response.data.data[0];

    // 배열 첫 번째 요소의 유효성 검사
    if (!projectData || projectData.length === 0 || !projectData) {
      console.error('No valid data in response:', response.data[0]);
      throw new ProjectCreationError('No valid data returned from the server', {
        response: response.data,
      });
    }

    console.log('Project data:', projectData);
    return {
      url: repoUrl,
      title: projectData.organization,
      intro: 'Generated by API',
      images: projectData.readme_images,
      sentences: projectData.gpt_response,
      serviceUrl: '',
    };
  } catch (error) {
    if (axios.isAxiosError(error)) {
      console.error('Axios error:', error.message);
      throw new ProjectCreationError(error.message, { errorDetails: error });
    } else {
      console.error('Unknown error:', error);
      throw new ProjectCreationError('An unknown error occurred', {
        errorDetails: error,
      });
    }
  }
}
